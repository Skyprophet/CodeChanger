
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 16 22:20:33 SGT 2014
//----------------------------------------------------

package codechanger;

import java.io.InputStream;
import codechanger.absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 16 22:20:33 SGT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\002\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\002\000" +
    "\002\006\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\005\000\002\011\007\000\002\011\010\000\002\011" +
    "\012\000\002\012\003\000\002\012\005\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\016\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\007\000" +
    "\002\020\007\000\002\020\006\000\002\020\006\000\002" +
    "\021\005\000\002\021\006\000\002\022\004\000\002\023" +
    "\006\000\002\023\010\000\002\023\005\000\002\023\003" +
    "\000\002\023\004\000\002\024\005\000\002\024\006\000" +
    "\002\025\003\000\002\025\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\002\000\002\027\004" +
    "\000\002\030\003\000\002\030\004\000\002\031\006\000" +
    "\002\032\007\000\002\032\011\000\002\033\007\000\002" +
    "\033\010\000\002\033\011\000\002\033\011\000\002\033" +
    "\011\000\002\033\012\000\002\033\012\000\002\033\012" +
    "\000\002\033\013\000\002\034\004\000\002\034\004\000" +
    "\002\034\005\000\002\034\006\000\002\034\007\000\002" +
    "\034\004\000\002\034\005\000\002\035\004\000\002\036" +
    "\003\000\002\036\005\000\002\037\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\040\003\000\002\041\003\000\002\041\005" +
    "\000\002\042\003\000\002\042\005\000\002\043\003\000" +
    "\002\043\005\000\002\044\003\000\002\044\005\000\002" +
    "\045\003\000\002\045\005\000\002\046\003\000\002\046" +
    "\005\000\002\046\005\000\002\047\003\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\050\003\000\002\050\005\000\002\050\005\000\002" +
    "\051\003\000\002\051\005\000\002\051\005\000\002\052" +
    "\003\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\053\003\000\002\053\006\000\002\057\004\000" +
    "\002\057\003\000\002\054\003\000\002\054\004\000\002" +
    "\054\004\000\002\054\004\000\002\054\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\004\000\002\054\006\000\002\055\004\000" +
    "\002\055\004\000\002\055\005\000\002\055\005\000\002" +
    "\055\006\000\002\055\006\000\002\055\003\000\002\060" +
    "\002\000\002\060\003\000\002\060\005\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\022\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\101\004\001\002\000\022\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\101" +
    "\004\001\002\000\020\002\ufffd\004\015\005\023\006\010" +
    "\007\011\010\014\011\012\001\002\000\004\002\007\001" +
    "\002\000\004\002\001\001\002\000\012\025\uffe3\033\uffe3" +
    "\072\uffe3\103\uffe3\001\002\000\012\025\uffe2\033\uffe2\072" +
    "\uffe2\103\uffe2\001\002\000\006\026\u0122\103\u0121\001\002" +
    "\000\010\033\266\072\035\103\032\001\002\000\006\026" +
    "\026\103\025\001\002\000\012\025\uffe5\033\uffe5\072\uffe5" +
    "\103\uffe5\001\002\000\102\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\027\ufff7\033\ufff7\046\ufff7\051\ufff7\052\ufff7" +
    "\070\ufff7\071\ufff7\072\ufff7\075\ufff7\076\ufff7\102\ufff7\103" +
    "\ufff7\104\ufff7\105\ufff7\001\002\000\020\002\ufffd\004\015" +
    "\005\023\006\010\007\011\010\014\011\012\001\002\000" +
    "\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\001\002\000\004\002\000\001\002\000\020\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\001\002\000\012\025\uffe4\033\uffe4\072\uffe4\103\uffe4\001" +
    "\002\000\004\002\ufffc\001\002\000\014\025\uffe1\026\262" +
    "\033\uffe1\072\uffe1\103\uffe1\001\002\000\016\004\015\005" +
    "\023\006\010\007\011\010\014\011\012\001\002\000\006" +
    "\072\035\103\032\001\002\000\004\027\031\001\002\000" +
    "\012\025\uffdd\033\uffdd\072\uffdd\103\uffdd\001\002\000\016" +
    "\024\uffd1\025\uffd1\030\uffd1\032\uffd1\033\uffd1\055\uffd1\001" +
    "\002\000\016\024\046\025\uffd5\030\045\032\uffd5\033\uffd5" +
    "\055\uffd5\001\002\000\006\032\042\033\uffef\001\002\000" +
    "\006\072\035\103\032\001\002\000\004\033\037\001\002" +
    "\000\020\004\015\005\023\006\010\007\011\010\014\011" +
    "\012\027\uffdb\001\002\000\004\027\uffda\001\002\000\016" +
    "\024\uffd0\025\uffd0\030\uffd0\032\uffd0\033\uffd0\055\uffd0\001" +
    "\002\000\006\072\035\103\032\001\002\000\004\033\uffee" +
    "\001\002\000\012\025\uffd4\032\uffd4\033\uffd4\055\uffd4\001" +
    "\002\000\036\023\065\024\074\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\020\004\015\005\023" +
    "\006\010\007\011\010\014\011\012\025\051\001\002\000" +
    "\006\072\035\103\032\001\002\000\006\025\ufff1\032\ufff1" +
    "\001\002\000\012\025\uffd6\032\uffd6\033\uffd6\055\uffd6\001" +
    "\002\000\006\025\053\032\054\001\002\000\012\025\uffd8" +
    "\032\uffd8\033\uffd8\055\uffd8\001\002\000\020\004\015\005" +
    "\023\006\010\007\011\010\014\011\012\054\056\001\002" +
    "\000\006\025\ufff0\032\ufff0\001\002\000\004\025\057\001" +
    "\002\000\012\025\uffd7\032\uffd7\033\uffd7\055\uffd7\001\002" +
    "\000\006\025\uffd9\032\uffd9\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\060\025\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\070\uff8d\071\uff8d\072\214" +
    "\073\213\074\212\076\uff8d\077\uff8d\100\uff8d\001\002\000" +
    "\036\023\065\024\074\046\072\051\101\052\105\070\067" +
    "\071\106\072\061\075\107\076\063\102\076\103\075\104" +
    "\102\105\103\001\002\000\026\025\uff9c\027\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\036\uff9c\037\uff9c\076\172\077\uff9c\100" +
    "\uff9c\001\002\000\036\023\065\024\255\046\072\051\101" +
    "\052\105\070\067\071\106\072\061\075\107\076\063\102" +
    "\076\103\075\104\102\105\103\001\002\000\022\025\uffa0" +
    "\027\uffa0\031\uffa0\032\uffa0\033\uffa0\036\uffa0\037\uffa0\077" +
    "\166\001\002\000\036\023\065\024\074\046\072\051\101" +
    "\052\105\070\067\071\106\072\061\075\107\076\063\102" +
    "\076\103\075\104\102\105\103\001\002\000\042\025\uff98" +
    "\027\uff98\031\uff98\032\uff98\033\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\201\043\202\044\177\045\200\076\uff98" +
    "\077\uff98\100\uff98\001\002\000\032\025\uff9a\027\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\040\174\041\175" +
    "\076\uff9a\077\uff9a\100\uff9a\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\024\025\uff9e\027\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\036\uff9e\037\uff9e\077\uff9e\100\170\001\002\000\052\004" +
    "\015\005\023\006\010\007\011\010\014\011\012\023\065" +
    "\024\074\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\075\104\102\105\103" +
    "\001\002\000\122\024\uff6d\025\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\036\uff6d\037\uff6d\040\uff6d" +
    "\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\047\uff6d\050" +
    "\uff6d\051\uff6d\052\uff6d\053\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066" +
    "\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d" +
    "\076\uff6d\077\uff6d\100\uff6d\001\002\000\122\024\uff6c\025" +
    "\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c" +
    "\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c" +
    "\072\uff6c\073\uff6c\074\uff6c\076\uff6c\077\uff6c\100\uff6c\001" +
    "\002\000\020\025\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\036\164\037\uffa2\001\002\000\006\031\uffa3\037\162\001" +
    "\002\000\036\023\065\024\241\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\122\024\uff6b\025\uff6b" +
    "\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\036" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b" +
    "\045\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\055" +
    "\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b" +
    "\064\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072" +
    "\uff6b\073\uff6b\074\uff6b\076\uff6b\077\uff6b\100\uff6b\001\002" +
    "\000\122\024\uff6a\025\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a" +
    "\042\uff6a\043\uff6a\044\uff6a\045\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\053\uff6a\055\uff6a\056\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\076\uff6a" +
    "\077\uff6a\100\uff6a\001\002\000\046\025\uff95\027\uff95\031" +
    "\uff95\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\047\205\050\204\076" +
    "\uff95\077\uff95\100\uff95\001\002\000\036\023\065\024\241" +
    "\046\072\051\101\052\105\070\067\071\106\072\061\075" +
    "\107\076\063\102\076\103\075\104\102\105\103\001\002" +
    "\000\036\023\065\024\074\046\072\051\101\052\105\070" +
    "\067\071\106\072\061\075\107\076\063\102\076\103\075" +
    "\104\102\105\103\001\002\000\036\023\065\024\074\046" +
    "\072\051\101\052\105\070\067\071\106\072\061\075\107" +
    "\076\063\102\076\103\075\104\102\105\103\001\002\000" +
    "\106\025\uff86\027\uff86\031\uff86\032\uff86\033\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\047\uff86\050\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\076\uff86" +
    "\077\uff86\100\uff86\001\002\000\004\031\234\001\002\000" +
    "\052\025\uff90\027\uff90\031\uff90\032\uff90\033\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\047\uff90\050\uff90\070\207\071\210\076\uff90\077\uff90" +
    "\100\uff90\001\002\000\122\024\uff71\025\uff71\027\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\047" +
    "\uff71\050\uff71\051\uff71\052\uff71\053\uff71\055\uff71\056\uff71" +
    "\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71" +
    "\074\uff71\076\uff71\077\uff71\100\uff71\001\002\000\122\024" +
    "\122\025\uff82\027\uff82\030\116\031\uff82\032\uff82\033\uff82" +
    "\034\123\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\047\uff82\050\uff82\051\117\052\121" +
    "\053\120\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\076\uff82\077\uff82\100" +
    "\uff82\001\002\000\060\025\uff8a\027\uff8a\031\uff8a\032\uff8a" +
    "\033\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a\070\uff8a\071\uff8a" +
    "\072\uff8a\073\uff8a\074\uff8a\076\uff8a\077\uff8a\100\uff8a\001" +
    "\002\000\036\023\065\024\074\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\122\024\uff77\025\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\055" +
    "\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77" +
    "\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072" +
    "\uff77\073\uff77\074\uff77\076\uff77\077\uff77\100\uff77\001\002" +
    "\000\004\103\226\001\002\000\122\024\uff76\025\uff76\027" +
    "\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\036\uff76" +
    "\037\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\055\uff76" +
    "\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76\064" +
    "\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76" +
    "\073\uff76\074\uff76\076\uff76\077\uff76\100\uff76\001\002\000" +
    "\040\023\065\024\074\025\uff70\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\004\103\124\001\002" +
    "\000\122\024\uff75\025\uff75\027\uff75\030\uff75\031\uff75\032" +
    "\uff75\033\uff75\034\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\043\uff75\044\uff75\045\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\055\uff75\056\uff75\057\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\076\uff75" +
    "\077\uff75\100\uff75\001\002\000\016\025\uffaf\027\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\037\162\001\002\000\106\025\uff86" +
    "\027\uff86\031\uff86\032\uff86\033\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86" +
    "\050\uff86\055\142\056\136\057\137\060\135\061\140\062" +
    "\143\063\146\064\145\065\141\066\144\067\134\070\uff86" +
    "\071\uff86\072\uff86\073\uff86\074\uff86\076\uff86\077\uff86\100" +
    "\uff86\001\002\000\006\025\uff6f\032\132\001\002\000\004" +
    "\025\131\001\002\000\122\024\uff72\025\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\034\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\055\uff72\056\uff72" +
    "\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065" +
    "\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72" +
    "\074\uff72\076\uff72\077\uff72\100\uff72\001\002\000\040\023" +
    "\065\024\074\025\uff70\046\072\051\101\052\105\070\067" +
    "\071\106\072\061\075\107\076\063\102\076\103\075\104" +
    "\102\105\103\001\002\000\004\025\uff6e\001\002\000\036" +
    "\023\065\024\074\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\036\023\065\024\074\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\036\023" +
    "\065\024\074\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\036\023\065\024\074\046\072\051\101" +
    "\052\105\070\067\071\106\072\061\075\107\076\063\102" +
    "\076\103\075\104\102\105\103\001\002\000\036\023\065" +
    "\024\074\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\075\104\102\105\103" +
    "\001\002\000\036\023\065\024\074\046\072\051\101\052" +
    "\105\070\067\071\106\072\061\075\107\076\063\102\076" +
    "\103\075\104\102\105\103\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\036\023\065\024\074\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\036\023\065\024\074" +
    "\046\072\051\101\052\105\070\067\071\106\072\061\075" +
    "\107\076\063\102\076\103\075\104\102\105\103\001\002" +
    "\000\036\023\065\024\074\046\072\051\101\052\105\070" +
    "\067\071\106\072\061\075\107\076\063\102\076\103\075" +
    "\104\102\105\103\001\002\000\036\023\065\024\074\046" +
    "\072\051\101\052\105\070\067\071\106\072\061\075\107" +
    "\076\063\102\076\103\075\104\102\105\103\001\002\000" +
    "\014\025\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\001\002" +
    "\000\014\025\uffa7\027\uffa7\031\uffa7\032\uffa7\033\uffa7\001" +
    "\002\000\014\025\uffa4\027\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\001\002\000\014\025\uffab\027\uffab\031\uffab\032\uffab\033" +
    "\uffab\001\002\000\014\025\uffae\027\uffae\031\uffae\032\uffae" +
    "\033\uffae\001\002\000\014\025\uffa6\027\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\001\002\000\014\025\uffac\027\uffac\031\uffac" +
    "\032\uffac\033\uffac\001\002\000\014\025\uffa9\027\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\001\002\000\014\025\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\001\002\000\014\025\uffad\027" +
    "\uffad\031\uffad\032\uffad\033\uffad\001\002\000\014\025\uffa5" +
    "\027\uffa5\031\uffa5\032\uffa5\033\uffa5\001\002\000\036\023" +
    "\065\024\074\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\020\025\uffa1\027\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\036\164\037\uffa1\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\022\025\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\036\uff9f\037\uff9f\077\166\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\024\025\uff9d\027\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\036\uff9d\037\uff9d\077\uff9d\100\170\001\002\000\036\023" +
    "\065\024\074\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\026\025\uff9b\027\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\036\uff9b\037\uff9b\076\172\077\uff9b\100\uff9b\001" +
    "\002\000\036\023\065\024\074\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\032\025\uff99\027\uff99" +
    "\031\uff99\032\uff99\033\uff99\036\uff99\037\uff99\040\174\041" +
    "\175\076\uff99\077\uff99\100\uff99\001\002\000\036\023\065" +
    "\024\074\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\075\104\102\105\103" +
    "\001\002\000\036\023\065\024\074\046\072\051\101\052" +
    "\105\070\067\071\106\072\061\075\107\076\063\102\076" +
    "\103\075\104\102\105\103\001\002\000\042\025\uff96\027" +
    "\uff96\031\uff96\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\201\043\202\044\177\045\200\076\uff96\077" +
    "\uff96\100\uff96\001\002\000\036\023\065\024\074\046\072" +
    "\051\101\052\105\070\067\071\106\072\061\075\107\076" +
    "\063\102\076\103\075\104\102\105\103\001\002\000\036" +
    "\023\065\024\074\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\036\023\065\024\074\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\036\023" +
    "\065\024\074\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\046\025\uff91\027\uff91\031\uff91\032\uff91" +
    "\033\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\047\205\050\204\076\uff91\077\uff91" +
    "\100\uff91\001\002\000\036\023\065\024\074\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\036\023" +
    "\065\024\074\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\052\025\uff8f\027\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f\070\207\071\210" +
    "\076\uff8f\077\uff8f\100\uff8f\001\002\000\036\023\065\024" +
    "\074\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\036\023\065\024\074\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\060\025\uff8b\027\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047\uff8b\050\uff8b" +
    "\070\uff8b\071\uff8b\072\214\073\213\074\212\076\uff8b\077" +
    "\uff8b\100\uff8b\001\002\000\036\023\065\024\074\046\072" +
    "\051\101\052\105\070\067\071\106\072\061\075\107\076" +
    "\063\102\076\103\075\104\102\105\103\001\002\000\036" +
    "\023\065\024\074\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\036\023\065\024\074\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\060\025" +
    "\uff89\027\uff89\031\uff89\032\uff89\033\uff89\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\047" +
    "\uff89\050\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89" +
    "\076\uff89\077\uff89\100\uff89\001\002\000\060\025\uff88\027" +
    "\uff88\031\uff88\032\uff88\033\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\047\uff88\050" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\076\uff88" +
    "\077\uff88\100\uff88\001\002\000\060\025\uff87\027\uff87\031" +
    "\uff87\032\uff87\033\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\047\uff87\050\uff87\070" +
    "\uff87\071\uff87\072\uff87\073\uff87\074\uff87\076\uff87\077\uff87" +
    "\100\uff87\001\002\000\060\025\uff8c\027\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c\070\uff8c\071" +
    "\uff8c\072\214\073\213\074\212\076\uff8c\077\uff8c\100\uff8c" +
    "\001\002\000\052\025\uff8e\027\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\047\uff8e\050\uff8e\070\207\071\210\076" +
    "\uff8e\077\uff8e\100\uff8e\001\002\000\046\025\uff92\027\uff92" +
    "\031\uff92\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\047\205\050\204" +
    "\076\uff92\077\uff92\100\uff92\001\002\000\046\025\uff93\027" +
    "\uff93\031\uff93\032\uff93\033\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\047\205\050" +
    "\204\076\uff93\077\uff93\100\uff93\001\002\000\046\025\uff94" +
    "\027\uff94\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\047\205" +
    "\050\204\076\uff94\077\uff94\100\uff94\001\002\000\042\025" +
    "\uff97\027\uff97\031\uff97\032\uff97\033\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\201\043\202\044\177\045\200\076" +
    "\uff97\077\uff97\100\uff97\001\002\000\122\024\uff74\025\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\036" +
    "\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74" +
    "\045\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\055" +
    "\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\076\uff74\077\uff74\100\uff74\001\002" +
    "\000\004\031\233\001\002\000\012\025\uffb1\031\uffb1\032" +
    "\231\033\uffb1\001\002\000\036\023\065\024\074\046\072" +
    "\051\101\052\105\070\067\071\106\072\061\075\107\076" +
    "\063\102\076\103\075\104\102\105\103\001\002\000\010" +
    "\025\uffb0\031\uffb0\033\uffb0\001\002\000\122\024\uff73\025" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\045\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73" +
    "\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063" +
    "\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070\uff73\071\uff73" +
    "\072\uff73\073\uff73\074\uff73\076\uff73\077\uff73\100\uff73\001" +
    "\002\000\014\025\uffd3\030\045\032\uffd3\033\uffd3\055\uffd3" +
    "\001\002\000\012\025\uffd2\032\uffd2\033\uffd2\055\uffd2\001" +
    "\002\000\106\025\uff7b\027\uff7b\031\uff7b\032\uff7b\033\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\047\uff7b\050\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\076\uff7b\077\uff7b\100\uff7b\001\002\000\106\025\uff7c\027" +
    "\uff7c\031\uff7c\032\uff7c\033\uff7c\036\uff7c\037\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c\050" +
    "\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071" +
    "\uff7c\072\uff7c\073\uff7c\074\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\001\002\000\106\025\uff80\027\uff80\031\uff80\032\uff80\033" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\047\uff80\050\uff80\055\uff80\056\uff80\057" +
    "\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80" +
    "\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074" +
    "\uff80\076\uff80\077\uff80\100\uff80\001\002\000\036\023\065" +
    "\024\074\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\075\104\102\105\103" +
    "\001\002\000\004\025\243\001\002\000\122\024\uff69\025" +
    "\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69" +
    "\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044" +
    "\uff69\045\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063" +
    "\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071\uff69" +
    "\072\uff69\073\uff69\074\uff69\076\uff69\077\uff69\100\uff69\001" +
    "\002\000\106\025\uff81\027\uff81\031\uff81\032\uff81\033\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\047\uff81\050\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81" +
    "\076\uff81\077\uff81\100\uff81\001\002\000\006\025\uff83\072" +
    "\uff83\001\002\000\006\025\247\072\250\001\002\000\036" +
    "\023\065\024\074\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\006\025\uff84\072\uff84\001\002\000" +
    "\106\025\uff85\027\uff85\031\uff85\032\uff85\033\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\047\uff85\050\uff85\055\uff85\056\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\076\uff85" +
    "\077\uff85\100\uff85\001\002\000\106\025\uff7a\027\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\044\uff7a\045\uff7a\047\uff7a\050\uff7a\055" +
    "\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\076\uff7a\077\uff7a\100\uff7a\001\002" +
    "\000\106\025\uff7d\027\uff7d\031\uff7d\032\uff7d\033\uff7d\036" +
    "\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d" +
    "\045\uff7d\047\uff7d\050\uff7d\055\uff7d\056\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\001\002\000\106\025\uff79\027\uff79" +
    "\031\uff79\032\uff79\033\uff79\036\uff79\037\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\047\uff79\050\uff79" +
    "\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79" +
    "\072\uff79\073\uff79\074\uff79\076\uff79\077\uff79\100\uff79\001" +
    "\002\000\052\004\015\005\023\006\010\007\011\010\014" +
    "\011\012\023\065\024\074\046\072\051\101\052\105\070" +
    "\067\071\106\072\061\075\107\076\063\102\076\103\075" +
    "\104\102\105\103\001\002\000\006\025\257\072\250\001" +
    "\002\000\106\025\uff78\027\uff78\031\uff78\032\uff78\033\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\045\uff78\047\uff78\050\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\076\uff78\077\uff78\100\uff78\001\002\000\106\025\uff7f\027" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f\050" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\001\002\000\106\025\uff7e\027\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\047\uff7e\050\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\001\002\000\016\004\015" +
    "\005\023\006\010\007\011\010\014\011\012\001\002\000" +
    "\004\027\264\001\002\000\012\025\uffdf\033\uffdf\072\uffdf" +
    "\103\uffdf\001\002\000\004\033\u0120\001\002\000\102\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6\027\ufff6\033\ufff6" +
    "\046\ufff6\051\ufff6\052\ufff6\070\ufff6\071\ufff6\072\ufff6\075" +
    "\ufff6\076\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\001\002" +
    "\000\006\032\u011e\033\uffed\001\002\000\014\024\303\030" +
    "\045\032\uffd5\033\uffd5\055\uffd5\001\002\000\010\032\uffeb" +
    "\033\uffeb\055\272\001\002\000\040\023\065\024\074\026" +
    "\273\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\040\023\065\024\074\026\273\046\072\051\101" +
    "\052\105\070\067\071\106\072\061\075\107\076\063\102" +
    "\076\103\075\104\102\105\103\001\002\000\006\032\uffea" +
    "\033\uffea\001\002\000\010\027\uffe9\032\uffe9\033\uffe9\001" +
    "\002\000\006\027\uffe7\032\301\001\002\000\004\027\300" +
    "\001\002\000\010\027\uffe8\032\uffe8\033\uffe8\001\002\000" +
    "\040\023\065\024\074\026\273\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\004\027\uffe6\001\002" +
    "\000\020\004\015\005\023\006\010\007\011\010\014\011" +
    "\012\025\304\001\002\000\012\026\312\032\uffd6\033\uffd6" +
    "\055\uffd6\001\002\000\006\025\306\032\307\001\002\000" +
    "\012\026\312\032\uffd8\033\uffd8\055\uffd8\001\002\000\020" +
    "\004\015\005\023\006\010\007\011\010\014\011\012\054" +
    "\310\001\002\000\004\025\311\001\002\000\012\026\312" +
    "\032\uffd7\033\uffd7\055\uffd7\001\002\000\100\004\015\005" +
    "\023\006\010\007\011\010\014\011\012\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\027\ufff9\033\ufff9\046\ufff9\051\ufff9" +
    "\052\ufff9\070\ufff9\071\ufff9\072\ufff9\075\ufff9\076\ufff9\102" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\020\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002\000\010\033\266\072\035\103\032\001\002\000\064" +
    "\012\325\014\334\015\321\016\320\017\331\020\333\021" +
    "\341\022\330\023\065\024\074\026\312\027\uffc9\033\322" +
    "\046\072\051\101\052\105\070\067\071\106\072\061\075" +
    "\107\076\063\102\076\103\327\104\102\105\103\001\002" +
    "\000\100\004\015\005\023\006\010\007\011\010\014\011" +
    "\012\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9\033" +
    "\ufff9\046\ufff9\051\ufff9\052\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\075\ufff9\076\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\001" +
    "\002\000\064\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\027" +
    "\ufff8\033\ufff8\046\ufff8\051\ufff8\052\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\075\ufff8\076\ufff8\102\ufff8\103\ufff8\104\ufff8\105" +
    "\ufff8\001\002\000\004\033\u011b\001\002\000\004\024\375" +
    "\001\002\000\066\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\033\uffc7\046\uffc7\051\uffc7\052\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\075\uffc7\076\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\001\002\000\066\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\026\uffca\027\uffca\033\uffca\046\uffca\051" +
    "\uffca\052\uffca\070\uffca\071\uffca\072\uffca\075\uffca\076\uffca" +
    "\102\uffca\103\uffca\104\uffca\105\uffca\001\002\000\066\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\033" +
    "\uffcc\046\uffcc\051\uffcc\052\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\075\uffcc\076\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc\001" +
    "\002\000\004\024\367\001\002\000\004\027\366\001\002" +
    "\000\116\024\uff6d\030\uff6d\032\uff6d\033\uff6d\034\uff6d\035" +
    "\365\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d" +
    "\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071" +
    "\uff6d\072\uff6d\073\uff6d\074\uff6d\076\uff6d\077\uff6d\100\uff6d" +
    "\001\002\000\040\023\065\024\074\033\362\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\004\033" +
    "\361\001\002\000\066\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\026\uffce\027\uffce\033\uffce\046\uffce\051\uffce\052\uffce" +
    "\070\uffce\071\uffce\072\uffce\075\uffce\076\uffce\102\uffce\103" +
    "\uffce\104\uffce\105\uffce\001\002\000\004\103\357\001\002" +
    "\000\004\024\353\001\002\000\066\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\026\uffcf\027\uffcf\033\uffcf\046\uffcf\051" +
    "\uffcf\052\uffcf\070\uffcf\071\uffcf\072\uffcf\075\uffcf\076\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\001\002\000\004\033" +
    "\352\001\002\000\066\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\033\uffcd\046\uffcd\051\uffcd\052\uffcd" +
    "\070\uffcd\071\uffcd\072\uffcd\075\uffcd\076\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\001\002\000\066\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\033\uffcb\046\uffcb" +
    "\051\uffcb\052\uffcb\070\uffcb\071\uffcb\072\uffcb\075\uffcb\076" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\001\002\000\004" +
    "\024\344\001\002\000\064\012\325\014\334\015\321\016" +
    "\320\017\331\020\333\021\341\022\330\023\065\024\074" +
    "\026\312\027\uffc9\033\322\046\072\051\101\052\105\070" +
    "\067\071\106\072\061\075\107\076\063\102\076\103\327" +
    "\104\102\105\103\001\002\000\004\027\uffc8\001\002\000" +
    "\040\023\065\024\074\025\346\046\072\051\101\052\105" +
    "\070\067\071\106\072\061\075\107\076\063\102\076\103" +
    "\075\104\102\105\103\001\002\000\004\025\350\001\002" +
    "\000\004\033\347\001\002\000\066\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\026\uffb6\027\uffb6\033\uffb6\046\uffb6\051" +
    "\uffb6\052\uffb6\070\uffb6\071\uffb6\072\uffb6\075\uffb6\076\uffb6" +
    "\102\uffb6\103\uffb6\104\uffb6\105\uffb6\001\002\000\004\033" +
    "\351\001\002\000\066\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\033\uffb5\046\uffb5\051\uffb5\052\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\075\uffb5\076\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\105\uffb5\001\002\000\066\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\033\uffc6\046\uffc6" +
    "\051\uffc6\052\uffc6\070\uffc6\071\uffc6\072\uffc6\075\uffc6\076" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\001\002\000\036" +
    "\023\065\024\074\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\004\025\355\001\002\000\062\012" +
    "\325\014\334\015\321\016\320\017\331\020\333\021\341" +
    "\022\330\023\065\024\074\026\312\033\322\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\327\104\102\105\103\001\002\000\066\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\033" +
    "\uffc2\046\uffc2\051\uffc2\052\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\075\uffc2\076\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\001" +
    "\002\000\004\033\360\001\002\000\066\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\033\uffb7\046\uffb7" +
    "\051\uffb7\052\uffb7\070\uffb7\071\uffb7\072\uffb7\075\uffb7\076" +
    "\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\001\002\000\066" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8" +
    "\033\uffb8\046\uffb8\051\uffb8\052\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\075\uffb8\076\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\001\002\000\066\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\026\uffb4\027\uffb4\033\uffb4\046\uffb4\051\uffb4\052\uffb4\070" +
    "\uffb4\071\uffb4\072\uffb4\075\uffb4\076\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\001\002\000\004\033\364\001\002\000" +
    "\066\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027" +
    "\uffb3\033\uffb3\046\uffb3\051\uffb3\052\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\075\uffb3\076\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\001\002\000\066\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\033\uffb2\046\uffb2\051\uffb2\052\uffb2" +
    "\070\uffb2\071\uffb2\072\uffb2\075\uffb2\076\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\001\002\000\104\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\033\uffc5\046" +
    "\uffc5\051\uffc5\052\uffc5\070\uffc5\071\uffc5\072\uffc5\075\uffc5" +
    "\076\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002\000" +
    "\036\023\065\024\074\046\072\051\101\052\105\070\067" +
    "\071\106\072\061\075\107\076\063\102\076\103\075\104" +
    "\102\105\103\001\002\000\004\025\371\001\002\000\062" +
    "\012\325\014\334\015\321\016\320\017\331\020\333\021" +
    "\341\022\330\023\065\024\074\026\312\033\322\046\072" +
    "\051\101\052\105\070\067\071\106\072\061\075\107\076" +
    "\063\102\076\103\327\104\102\105\103\001\002\000\066" +
    "\012\uffc4\013\373\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\033\uffc4\046\uffc4\051\uffc4\052\uffc4\070\uffc4\071\uffc4\072" +
    "\uffc4\075\uffc4\076\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\001\002\000\062\012\325\014\334\015\321\016\320\017" +
    "\331\020\333\021\341\022\330\023\065\024\074\026\312" +
    "\033\322\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\327\104\102\105\103" +
    "\001\002\000\066\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\033\uffc3\046\uffc3\051\uffc3\052\uffc3\070" +
    "\uffc3\071\uffc3\072\uffc3\075\uffc3\076\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\105\uffc3\001\002\000\040\023\065\024\074\033" +
    "\376\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\075\104\102\105\103\001" +
    "\002\000\040\023\065\024\074\033\u010e\046\072\051\101" +
    "\052\105\070\067\071\106\072\061\075\107\076\063\102" +
    "\076\103\075\104\102\105\103\001\002\000\004\033\u0100" +
    "\001\002\000\040\023\065\024\074\033\u0101\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\075\104\102\105\103\001\002\000\040\023" +
    "\065\024\074\025\u010a\046\072\051\101\052\105\070\067" +
    "\071\106\072\061\075\107\076\063\102\076\103\075\104" +
    "\102\105\103\001\002\000\004\033\u0103\001\002\000\040" +
    "\023\065\024\074\025\u0105\046\072\051\101\052\105\070" +
    "\067\071\106\072\061\075\107\076\063\102\076\103\075" +
    "\104\102\105\103\001\002\000\004\025\u0107\001\002\000" +
    "\062\012\325\014\334\015\321\016\320\017\331\020\333" +
    "\021\341\022\330\023\065\024\074\026\312\033\322\046" +
    "\072\051\101\052\105\070\067\071\106\072\061\075\107" +
    "\076\063\102\076\103\327\104\102\105\103\001\002\000" +
    "\066\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027" +
    "\uffbd\033\uffbd\046\uffbd\051\uffbd\052\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\075\uffbd\076\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\001\002\000\062\012\325\014\334\015\321\016\320" +
    "\017\331\020\333\021\341\022\330\023\065\024\074\026" +
    "\312\033\322\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\327\104\102\105" +
    "\103\001\002\000\066\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024" +
    "\uffba\026\uffba\027\uffba\033\uffba\046\uffba\051\uffba\052\uffba" +
    "\070\uffba\071\uffba\072\uffba\075\uffba\076\uffba\102\uffba\103" +
    "\uffba\104\uffba\105\uffba\001\002\000\004\025\u010c\001\002" +
    "\000\062\012\325\014\334\015\321\016\320\017\331\020" +
    "\333\021\341\022\330\023\065\024\074\026\312\033\322" +
    "\046\072\051\101\052\105\070\067\071\106\072\061\075" +
    "\107\076\063\102\076\103\327\104\102\105\103\001\002" +
    "\000\066\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0" +
    "\027\uffc0\033\uffc0\046\uffc0\051\uffc0\052\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\075\uffc0\076\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\001\002\000\062\012\325\014\334\015\321\016" +
    "\320\017\331\020\333\021\341\022\330\023\065\024\074" +
    "\026\312\033\322\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\327\104\102" +
    "\105\103\001\002\000\066\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\027\uffbc\033\uffbc\046\uffbc\051\uffbc\052" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\075\uffbc\076\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\001\002\000\040\023\065\024" +
    "\074\025\u0117\046\072\051\101\052\105\070\067\071\106" +
    "\072\061\075\107\076\063\102\076\103\075\104\102\105" +
    "\103\001\002\000\004\033\u0110\001\002\000\040\023\065" +
    "\024\074\025\u0112\046\072\051\101\052\105\070\067\071" +
    "\106\072\061\075\107\076\063\102\076\103\075\104\102" +
    "\105\103\001\002\000\004\025\u0114\001\002\000\062\012" +
    "\325\014\334\015\321\016\320\017\331\020\333\021\341" +
    "\022\330\023\065\024\074\026\312\033\322\046\072\051" +
    "\101\052\105\070\067\071\106\072\061\075\107\076\063" +
    "\102\076\103\327\104\102\105\103\001\002\000\066\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\033" +
    "\uffbf\046\uffbf\051\uffbf\052\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\075\uffbf\076\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\001" +
    "\002\000\062\012\325\014\334\015\321\016\320\017\331" +
    "\020\333\021\341\022\330\023\065\024\074\026\312\033" +
    "\322\046\072\051\101\052\105\070\067\071\106\072\061" +
    "\075\107\076\063\102\076\103\327\104\102\105\103\001" +
    "\002\000\066\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026" +
    "\uffbb\027\uffbb\033\uffbb\046\uffbb\051\uffbb\052\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\075\uffbb\076\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\001\002\000\004\025\u0119\001\002\000\062" +
    "\012\325\014\334\015\321\016\320\017\331\020\333\021" +
    "\341\022\330\023\065\024\074\026\312\033\322\046\072" +
    "\051\101\052\105\070\067\071\106\072\061\075\107\076" +
    "\063\102\076\103\327\104\102\105\103\001\002\000\066" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1" +
    "\033\uffc1\046\uffc1\051\uffc1\052\uffc1\070\uffc1\071\uffc1\072" +
    "\uffc1\075\uffc1\076\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\001\002\000\062\012\325\014\334\015\321\016\320\017" +
    "\331\020\333\021\341\022\330\023\065\024\074\026\312" +
    "\033\322\046\072\051\101\052\105\070\067\071\106\072" +
    "\061\075\107\076\063\102\076\103\327\104\102\105\103" +
    "\001\002\000\066\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\026\uffbe\027\uffbe\033\uffbe\046\uffbe\051\uffbe\052\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\075\uffbe\076\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\001\002\000\066\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\026\uffb9\027\uffb9\033\uffb9\046\uffb9\051" +
    "\uffb9\052\uffb9\070\uffb9\071\uffb9\072\uffb9\075\uffb9\076\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\105\uffb9\001\002\000\020\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\001\002\000\020\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\001\002\000\006\072\035\103\032" +
    "\001\002\000\004\033\uffec\001\002\000\102\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\026\ufff5\027\ufff5\033\ufff5\046\ufff5" +
    "\051\ufff5\052\ufff5\070\ufff5\071\ufff5\072\ufff5\075\ufff5\076" +
    "\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\001\002\000\014" +
    "\025\uffe0\026\u0125\033\uffe0\072\uffe0\103\uffe0\001\002\000" +
    "\016\004\015\005\023\006\010\007\011\010\014\011\012" +
    "\001\002\000\004\027\u0124\001\002\000\012\025\uffdc\033" +
    "\uffdc\072\uffdc\103\uffdc\001\002\000\016\004\015\005\023" +
    "\006\010\007\011\010\014\011\012\001\002\000\004\027" +
    "\u0127\001\002\000\012\025\uffde\033\uffde\072\uffde\103\uffde" +
    "\001\002\000\020\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\006\002\005\003\004\001\001\000\004\003" +
    "\u0127\001\001\000\016\004\020\005\016\007\017\010\015" +
    "\011\021\020\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\264\015\266\023\270\025\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\023\005\016\007\017\010\015\011\021\020\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\026\021\027\001\001\000\010\013\035\023\033" +
    "\025\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\043\001\001\000\002\001\001" +
    "\000\004\025\040\001\001\000\002\001\001\000\006\020" +
    "\026\021\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\042\023\033\025\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\040\110\041\077\042\076" +
    "\043\065\044\072\045\063\046\070\047\067\050\103\051" +
    "\111\052\061\053\114\054\107\055\113\056\112\001\001" +
    "\000\010\012\051\020\046\022\047\001\001\000\006\023" +
    "\057\025\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\046\022" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\053\260\054\107\055" +
    "\113\056\112\001\001\000\002\001\001\000\012\053\257" +
    "\054\107\055\113\056\112\001\001\000\002\001\001\000" +
    "\010\054\253\055\113\056\112\001\001\000\002\001\001" +
    "\000\012\053\252\054\107\055\113\056\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\053\251\054\107" +
    "\055\113\056\112\001\001\000\002\001\001\000\046\020" +
    "\244\036\241\037\227\041\124\042\076\043\065\044\072" +
    "\045\063\046\070\047\067\050\103\051\111\052\061\053" +
    "\114\054\125\055\113\056\112\057\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\243\055\113\056\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\237\055\113\056\112\001\001\000\012\053\236\054\107" +
    "\055\113\056\112\001\001\000\012\053\235\054\107\055" +
    "\113\056\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\036\226\037\227\041\124\042\076" +
    "\043\065\044\072\045\063\046\070\047\067\050\103\051" +
    "\111\052\061\053\114\054\125\055\113\056\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\037\126\041\124\042\076\043\065\044\072\045\063" +
    "\046\070\047\067\050\103\051\111\052\061\053\114\054" +
    "\125\055\113\056\112\060\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\037\126\041\124\042\076\043\065\044\072\045\063\046" +
    "\070\047\067\050\103\051\111\052\061\053\114\054\125" +
    "\055\113\056\112\060\132\001\001\000\002\001\001\000" +
    "\040\037\160\041\124\042\076\043\065\044\072\045\063" +
    "\046\070\047\067\050\103\051\111\052\061\053\114\054" +
    "\125\055\113\056\112\001\001\000\040\037\157\041\124" +
    "\042\076\043\065\044\072\045\063\046\070\047\067\050" +
    "\103\051\111\052\061\053\114\054\125\055\113\056\112" +
    "\001\001\000\040\037\156\041\124\042\076\043\065\044" +
    "\072\045\063\046\070\047\067\050\103\051\111\052\061" +
    "\053\114\054\125\055\113\056\112\001\001\000\040\037" +
    "\155\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\040\037\154\041\124\042\076" +
    "\043\065\044\072\045\063\046\070\047\067\050\103\051" +
    "\111\052\061\053\114\054\125\055\113\056\112\001\001" +
    "\000\040\037\153\041\124\042\076\043\065\044\072\045" +
    "\063\046\070\047\067\050\103\051\111\052\061\053\114" +
    "\054\125\055\113\056\112\001\001\000\040\037\152\041" +
    "\124\042\076\043\065\044\072\045\063\046\070\047\067" +
    "\050\103\051\111\052\061\053\114\054\125\055\113\056" +
    "\112\001\001\000\040\037\151\041\124\042\076\043\065" +
    "\044\072\045\063\046\070\047\067\050\103\051\111\052" +
    "\061\053\114\054\125\055\113\056\112\001\001\000\040" +
    "\037\150\041\124\042\076\043\065\044\072\045\063\046" +
    "\070\047\067\050\103\051\111\052\061\053\114\054\125" +
    "\055\113\056\112\001\001\000\040\037\147\041\124\042" +
    "\076\043\065\044\072\045\063\046\070\047\067\050\103" +
    "\051\111\052\061\053\114\054\125\055\113\056\112\001" +
    "\001\000\040\037\146\041\124\042\076\043\065\044\072" +
    "\045\063\046\070\047\067\050\103\051\111\052\061\053" +
    "\114\054\125\055\113\056\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\042\162\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\107\055" +
    "\113\056\112\001\001\000\002\001\001\000\032\043\164" +
    "\044\072\045\063\046\070\047\067\050\103\051\111\052" +
    "\061\053\114\054\107\055\113\056\112\001\001\000\002" +
    "\001\001\000\030\044\166\045\063\046\070\047\067\050" +
    "\103\051\111\052\061\053\114\054\107\055\113\056\112" +
    "\001\001\000\002\001\001\000\026\045\170\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\107\055\113" +
    "\056\112\001\001\000\002\001\001\000\024\046\172\047" +
    "\067\050\103\051\111\052\061\053\114\054\107\055\113" +
    "\056\112\001\001\000\002\001\001\000\022\047\224\050" +
    "\103\051\111\052\061\053\114\054\107\055\113\056\112" +
    "\001\001\000\022\047\175\050\103\051\111\052\061\053" +
    "\114\054\107\055\113\056\112\001\001\000\002\001\001" +
    "\000\020\050\223\051\111\052\061\053\114\054\107\055" +
    "\113\056\112\001\001\000\020\050\222\051\111\052\061" +
    "\053\114\054\107\055\113\056\112\001\001\000\020\050" +
    "\221\051\111\052\061\053\114\054\107\055\113\056\112" +
    "\001\001\000\020\050\202\051\111\052\061\053\114\054" +
    "\107\055\113\056\112\001\001\000\002\001\001\000\016" +
    "\051\220\052\061\053\114\054\107\055\113\056\112\001" +
    "\001\000\016\051\205\052\061\053\114\054\107\055\113" +
    "\056\112\001\001\000\002\001\001\000\014\052\217\053" +
    "\114\054\107\055\113\056\112\001\001\000\014\052\210" +
    "\053\114\054\107\055\113\056\112\001\001\000\002\001" +
    "\001\000\012\053\216\054\107\055\113\056\112\001\001" +
    "\000\012\053\215\054\107\055\113\056\112\001\001\000" +
    "\012\053\214\054\107\055\113\056\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\036\231\037\227" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\036\241\037" +
    "\227\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\053\250\054\107\055\113\056\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\020\244\036\241\037\227" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\057\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\026" +
    "\021\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\043\001\001\000\002\001\001\000\042\016\273\037" +
    "\274\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\044\016\275\017\276\037\274" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\016\275\017\301\037\274\041\124\042\076\043\065\044" +
    "\072\045\063\046\070\047\067\050\103\051\111\052\061" +
    "\053\114\054\125\055\113\056\112\001\001\000\002\001" +
    "\001\000\010\012\304\020\046\022\047\001\001\000\004" +
    "\031\u011c\001\001\000\002\001\001\000\004\031\u011b\001" +
    "\001\000\006\020\046\022\054\001\001\000\002\001\001" +
    "\000\004\031\312\001\001\000\012\006\314\007\315\010" +
    "\015\020\313\001\001\000\002\001\001\000\012\014\264" +
    "\015\266\023\270\025\032\001\001\000\062\026\341\027" +
    "\325\030\334\031\331\032\336\033\323\034\337\035\322" +
    "\036\335\037\227\041\124\042\076\043\065\044\072\045" +
    "\063\046\070\047\067\050\103\051\111\052\061\053\114" +
    "\054\125\055\113\056\112\001\001\000\012\006\316\007" +
    "\315\010\015\020\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\036\362\037\227\041\124\042" +
    "\076\043\065\044\072\045\063\046\070\047\067\050\103" +
    "\051\111\052\061\053\114\054\125\055\113\056\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\026\341\027\342\030\334\031\331\032\336\033\323\034" +
    "\337\035\322\036\335\037\227\041\124\042\076\043\065" +
    "\044\072\045\063\046\070\047\067\050\103\051\111\052" +
    "\061\053\114\054\125\055\113\056\112\001\001\000\002" +
    "\001\001\000\042\036\344\037\227\041\124\042\076\043" +
    "\065\044\072\045\063\046\070\047\067\050\103\051\111" +
    "\052\061\053\114\054\125\055\113\056\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\036" +
    "\353\037\227\041\124\042\076\043\065\044\072\045\063" +
    "\046\070\047\067\050\103\051\111\052\061\053\114\054" +
    "\125\055\113\056\112\001\001\000\002\001\001\000\060" +
    "\026\355\030\334\031\331\032\336\033\323\034\337\035" +
    "\322\036\335\037\227\041\124\042\076\043\065\044\072" +
    "\045\063\046\070\047\067\050\103\051\111\052\061\053" +
    "\114\054\125\055\113\056\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\036\367\037\227\041" +
    "\124\042\076\043\065\044\072\045\063\046\070\047\067" +
    "\050\103\051\111\052\061\053\114\054\125\055\113\056" +
    "\112\001\001\000\002\001\001\000\060\026\371\030\334" +
    "\031\331\032\336\033\323\034\337\035\322\036\335\037" +
    "\227\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\002\001\001\000\060\026\373" +
    "\030\334\031\331\032\336\033\323\034\337\035\322\036" +
    "\335\037\227\041\124\042\076\043\065\044\072\045\063" +
    "\046\070\047\067\050\103\051\111\052\061\053\114\054" +
    "\125\055\113\056\112\001\001\000\002\001\001\000\042" +
    "\036\376\037\227\041\124\042\076\043\065\044\072\045" +
    "\063\046\070\047\067\050\103\051\111\052\061\053\114" +
    "\054\125\055\113\056\112\001\001\000\042\036\u010e\037" +
    "\227\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\002\001\001\000\042\036\u0101" +
    "\037\227\041\124\042\076\043\065\044\072\045\063\046" +
    "\070\047\067\050\103\051\111\052\061\053\114\054\125" +
    "\055\113\056\112\001\001\000\042\036\u0108\037\227\041" +
    "\124\042\076\043\065\044\072\045\063\046\070\047\067" +
    "\050\103\051\111\052\061\053\114\054\125\055\113\056" +
    "\112\001\001\000\002\001\001\000\042\036\u0103\037\227" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\001\001\000\002\001\001\000\060\026\u0105\030" +
    "\334\031\331\032\336\033\323\034\337\035\322\036\335" +
    "\037\227\041\124\042\076\043\065\044\072\045\063\046" +
    "\070\047\067\050\103\051\111\052\061\053\114\054\125" +
    "\055\113\056\112\001\001\000\002\001\001\000\060\026" +
    "\u0107\030\334\031\331\032\336\033\323\034\337\035\322" +
    "\036\335\037\227\041\124\042\076\043\065\044\072\045" +
    "\063\046\070\047\067\050\103\051\111\052\061\053\114" +
    "\054\125\055\113\056\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\026\u010a\030\334\031\331\032\336" +
    "\033\323\034\337\035\322\036\335\037\227\041\124\042" +
    "\076\043\065\044\072\045\063\046\070\047\067\050\103" +
    "\051\111\052\061\053\114\054\125\055\113\056\112\001" +
    "\001\000\002\001\001\000\060\026\u010c\030\334\031\331" +
    "\032\336\033\323\034\337\035\322\036\335\037\227\041" +
    "\124\042\076\043\065\044\072\045\063\046\070\047\067" +
    "\050\103\051\111\052\061\053\114\054\125\055\113\056" +
    "\112\001\001\000\002\001\001\000\042\036\u0115\037\227" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\001\001\000\002\001\001\000\042\036\u0110\037" +
    "\227\041\124\042\076\043\065\044\072\045\063\046\070" +
    "\047\067\050\103\051\111\052\061\053\114\054\125\055" +
    "\113\056\112\001\001\000\002\001\001\000\060\026\u0112" +
    "\030\334\031\331\032\336\033\323\034\337\035\322\036" +
    "\335\037\227\041\124\042\076\043\065\044\072\045\063" +
    "\046\070\047\067\050\103\051\111\052\061\053\114\054" +
    "\125\055\113\056\112\001\001\000\002\001\001\000\060" +
    "\026\u0114\030\334\031\331\032\336\033\323\034\337\035" +
    "\322\036\335\037\227\041\124\042\076\043\065\044\072" +
    "\045\063\046\070\047\067\050\103\051\111\052\061\053" +
    "\114\054\125\055\113\056\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\026\u0117\030\334\031\331\032" +
    "\336\033\323\034\337\035\322\036\335\037\227\041\124" +
    "\042\076\043\065\044\072\045\063\046\070\047\067\050" +
    "\103\051\111\052\061\053\114\054\125\055\113\056\112" +
    "\001\001\000\002\001\001\000\060\026\u0119\030\334\031" +
    "\331\032\336\033\323\034\337\035\322\036\335\037\227" +
    "\041\124\042\076\043\065\044\072\045\063\046\070\047" +
    "\067\050\103\051\111\052\061\053\114\054\125\055\113" +
    "\056\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\u011e\015\266" +
    "\023\270\025\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\026\021\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\026\021" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("\tParsing error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

      if (s.left >= 0) {
        m.append(" in line " + (s.left +1 ));
        if (s.right >= 0) {
          m.append(", column " + (s.right + 1));
        }
      }
    }
    m.append(" : " + message);
    System.err.println(m);
  }

  public Parser(InputStream inp) {
    this(new Lexer(inp));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  static codechanger.ParserSymbol symbol(String s) {
    return codechanger.ParserSymbol.getSymbol(s);
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // primexpr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // primexpr ::= CHARCONST 
            {
              Expr RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char ch = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConst(ch); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primexpr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // primexpr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Num(n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // primexpr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primexpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= assignexpr COMMAR arguments 
            {
              Arguments RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arguments ags = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if (ags == null) RESULT = new Arguments(ae);
                else { ags.add(ae); RESULT = ags; }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arguments ::= assignexpr 
            {
              Arguments RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arguments(ae); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arguments ::= 
            {
              Arguments RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // pfixexpr ::= primexpr 
            {
              Expr RESULT =null;
		int preleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int preright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pre = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pre; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // pfixexpr ::= pfixexpr LPAREN arguments RPAREN 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int agsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int agsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arguments ags = (Arguments)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallExpr(pfe, ags); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // pfixexpr ::= pfixexpr LBRAKET expr RBRAKET 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AdrsExpr(pfe, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // pfixexpr ::= pfixexpr PTR ID 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(pfe, symbol(i), PostfixExpr.PfType.PTR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // pfixexpr ::= pfixexpr DOT ID 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PostfixExpr(pfe, symbol(i), PostfixExpr.PfType.DOT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // pfixexpr ::= pfixexpr DEC 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccExpr(AccExpr.AccType.DEC, pfe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // pfixexpr ::= pfixexpr INC 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccExpr(AccExpr.AccType.INC, pfe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pfixexpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unaryexpr ::= SIZEOF LPAREN typename RPAREN 
            {
              Expr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName ty = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeSizeExpr(ty); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unaryexpr ::= SIZEOF unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.SIZEOF, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unaryexpr ::= NOT castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.NOT, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unaryexpr ::= TIDLE castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.TIDLE, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unaryexpr ::= MINUS castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.MINUS, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unaryexpr ::= PLUS castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.PLUS, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryexpr ::= TIMES castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.TIMES, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unaryexpr ::= AND castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.AND, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unaryexpr ::= DEC unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.DEC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unaryexpr ::= INC unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.UnaryType.INC, ue); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unaryexpr ::= pfixexpr 
            {
              Expr RESULT =null;
		int pfeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pferight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pfe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pfe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryexpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // typename ::= typespec 
            {
              TypeName RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpTypeName(ts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // typename ::= typename TIMES 
            {
              TypeName RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeName tn = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PtrTypeName(tn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // castexpr ::= LPAREN typename RPAREN castexpr 
            {
              Expr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeName ty = (TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpr(ty, ce); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // castexpr ::= unaryexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ue; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castexpr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // multiexpr ::= multiexpr MOD castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.MOD); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multiexpr ::= multiexpr DIVIDE castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.DIVIDE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiexpr ::= multiexpr TIMES castexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(me, ce, Op.OpType.TIMES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiexpr ::= castexpr 
            {
              Expr RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ce = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiexpr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // addexpr ::= addexpr MINUS multiexpr 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ae, me, Op.OpType.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // addexpr ::= addexpr PLUS multiexpr 
            {
              Expr RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ae, me, Op.OpType.PLUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // addexpr ::= multiexpr 
            {
              Expr RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr me = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = me; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addexpr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // shiftexpr ::= shiftexpr SHR addexpr 
            {
              Expr RESULT =null;
		int sfteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sfteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr sfte = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(sfte, adde, Op.OpType.SHR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // shiftexpr ::= shiftexpr SHL addexpr 
            {
              Expr RESULT =null;
		int sfteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sfteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr sfte = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(sfte, adde, Op.OpType.SHL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // shiftexpr ::= addexpr 
            {
              Expr RESULT =null;
		int addeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr adde = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = adde; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftexpr",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relationexpr ::= relationexpr GE shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.GE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relationexpr ::= relationexpr LE shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.LE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // relationexpr ::= relationexpr GT shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.GT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relationexpr ::= relationexpr LT shiftexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(re, se, Op.OpType.LT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relationexpr ::= shiftexpr 
            {
              Expr RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = se; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationexpr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // eqexpr ::= eqexpr NE relationexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(eqe, re, Op.OpType.NE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // eqexpr ::= eqexpr EQ relationexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(eqe, re, Op.OpType.EQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // eqexpr ::= relationexpr 
            {
              Expr RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr re = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = re; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eqexpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // andexpr ::= andexpr AND eqexpr 
            {
              Expr RESULT =null;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ande, eqe, Op.OpType.AND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // andexpr ::= eqexpr 
            {
              Expr RESULT =null;
		int eqeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eqeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr eqe = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eqe; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andexpr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // xorexpr ::= xorexpr XOR andexpr 
            {
              Expr RESULT =null;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(xore, ande, Op.OpType.XOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xorexpr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // xorexpr ::= andexpr 
            {
              Expr RESULT =null;
		int andeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int anderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ande; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xorexpr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // orexpr ::= orexpr OR xorexpr 
            {
              Expr RESULT =null;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ore, xore, Op.OpType.OR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orexpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // orexpr ::= xorexpr 
            {
              Expr RESULT =null;
		int xoreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xoreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr xore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("orexpr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parandexpr ::= parandexpr PARAAND orexpr 
            {
              Expr RESULT =null;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pande, ore, Op.OpType.PARAAND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parandexpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parandexpr ::= orexpr 
            {
              Expr RESULT =null;
		int oreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parandexpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parorexpr ::= parorexpr PARAOR parandexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(pore, pande, Op.OpType.PARAOR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parorexpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parorexpr ::= parandexpr 
            {
              Expr RESULT =null;
		int pandeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int panderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pande = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pande; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parorexpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // constexpr ::= parorexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constexpr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignexpr ::= unaryexpr OR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.OR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignexpr ::= unaryexpr XOR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.XOR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignexpr ::= unaryexpr AND_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.AND_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignexpr ::= unaryexpr SHR_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SHR_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignexpr ::= unaryexpr SHL_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SHL_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignexpr ::= unaryexpr SUB_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.SUB_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignexpr ::= unaryexpr ADD_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.ADD_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignexpr ::= unaryexpr MOD_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.MOD_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignexpr ::= unaryexpr DIV_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.DIV_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignexpr ::= unaryexpr MUL_ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.MUL_ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignexpr ::= unaryexpr ASSIGN assignexpr 
            {
              Expr RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ue = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ae = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Op(ue, ae, Op.OpType.ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignexpr ::= parorexpr 
            {
              Expr RESULT =null;
		int poreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int poreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr pore = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pore; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexpr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= assignexpr COMMAR expr 
            {
              Exprs RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.add(aexpr); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= assignexpr 
            {
              Exprs RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Exprs(aexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // labelstmt ::= ID COLON 
            {
              LabelStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LabelStmt(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labelstmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // jmpstmt ::= RETURN expr SEMICOLON 
            {
              JmpStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(e, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // jmpstmt ::= RETURN SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new ReturnStmt(null, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // jmpstmt ::= DEBUG_RETURN LPAREN expr RPAREN SEMICOLON 
            {
              JmpStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ReturnStmt(e, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // jmpstmt ::= DEBUG_RETURN LPAREN RPAREN SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new ReturnStmt(null, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // jmpstmt ::= GOTO ID SEMICOLON 
            {
              JmpStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new GotoStmt(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // jmpstmt ::= BREAK SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new BreakStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // jmpstmt ::= CONTINUE SEMICOLON 
            {
              JmpStmt RESULT =null;
		 RESULT = new ContinueStmt(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmpstmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // iterstmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, eb, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iterstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, eb, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iterstmt ::= FOR LPAREN expr SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs ec = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, null, ec, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // iterstmt ::= FOR LPAREN expr SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exprs ea = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exprs eb = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(ea, eb, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // iterstmt ::= FOR LPAREN SEMICOLON SEMICOLON expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, null, e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // iterstmt ::= FOR LPAREN SEMICOLON expr SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, e, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // iterstmt ::= FOR LPAREN expr SEMICOLON SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(e, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // iterstmt ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN stmt 
            {
              IterStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForStmt(null, null, null, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iterstmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              IterStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStmt(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterstmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // selstmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              SelStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt x = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelStmt(e, s, x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // selstmt ::= IF LPAREN expr RPAREN stmt 
            {
              SelStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SelStmt(e, s, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selstmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cpdstmt ::= LBRACE declars stmts RBRACE 
            {
              CpdStmt RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Declars ds = (Declars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CpdStmt(ds, sts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cpdstmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprstmt ::= expr SEMICOLON 
            {
              ExprStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exprs e = (Exprs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExprStmt(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprstmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprstmt ::= SEMICOLON 
            {
              ExprStmt RESULT =null;
		 RESULT = new ExprStmt(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprstmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (sts == null) RESULT = new Stmts(st);
            else { sts.list.addFirst(st); RESULT = sts; }
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= labelstmt 
            {
              Stmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LabelStmt l = (LabelStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= jmpstmt 
            {
              Stmt RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JmpStmt j = (JmpStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = j; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= iterstmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterStmt i = (IterStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= selstmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SelStmt s = (SelStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= cpdstmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt c = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= exprstmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExprStmt e = (ExprStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pldecltor ::= TIMES pldecltor 
            {
              PlDecltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PtrPlDecltor(pdtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecltor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pldecltor ::= ID 
            {
              PlDecltor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpPlDecltor(symbol(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecltor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arrparas ::= LBRAKET constexpr RBRAKET arrparas 
            {
              ArrParas RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr cexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrParas aprs = (ArrParas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 aprs.list.addFirst(cexpr); RESULT = aprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrparas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arrparas ::= LBRAKET constexpr RBRAKET 
            {
              ArrParas RESULT =null;
		int cexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr cexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrParas(cexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrparas",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decltor ::= pldecltor arrparas 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrParas aprs = (ArrParas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrDecltor(pdtor, aprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decltor ::= pldecltor 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SmpDecltor(pdtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decltor ::= pldecltor LPAREN RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDecltor(pdtor, null, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decltor ::= pldecltor LPAREN para COMMAR ELLIPSIS RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new FuncDecltor(pdtor, pr, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decltor ::= pldecltor LPAREN para RPAREN 
            {
              Decltor RESULT =null;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncDecltor(pdtor, pr, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltor",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pldecl ::= typespec decltor 
            {
              PlDecl RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlDecl(ty, dtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pldecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structdecls ::= typespec decltors SEMICOLON structdecls 
            {
              StructDecls RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltors ds = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 stds.adds(ty, ds); RESULT = stds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structdecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structdecls ::= typespec decltors SEMICOLON 
            {
              StructDecls RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decltors ds = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructDecls(ty, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structdecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typespec ::= UNION LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnionTy(stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // typespec ::= STRUCT LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTy(stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typespec ::= UNION ID LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new UnionTy(symbol(i), stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typespec ::= STRUCT ID LBRACE structdecls RBRACE 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructDecls stds = (StructDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructTy(symbol(i), stds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typespec ::= UNION ID 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnionTy(symbol(i), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typespec ::= STRUCT ID 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new StructTy(symbol(i), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typespec ::= BOOL 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("bool")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typespec ::= INT 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("int")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typespec ::= CHAR 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("char")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typespec ::= VOID 
            {
              Ty RESULT =null;
		 RESULT = new NameTy(symbol("void")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typespec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // initers ::= initer COMMAR initers 
            {
              Initers RESULT =null;
		int interleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int interright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Initer inter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int intersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initers inters = (Initers)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 inters.list.addFirst(inter); RESULT = inters; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initers",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // initers ::= initer 
            {
              Initers RESULT =null;
		int interleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initer inter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Initers(inter); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initers",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // initer ::= LBRACE initers RBRACE 
            {
              Initer RESULT =null;
		int intersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int intersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Initers inters = (Initers)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CpdIniter(inters); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initer ::= assignexpr 
            {
              Initer RESULT =null;
		int aexprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aexprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr aexpr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlIniter(aexpr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initer",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initdecltor ::= decltor ASSIGN initer 
            {
              InitDecltor RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Initer iter = (Initer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltor(dtor, iter); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initdecltor ::= decltor 
            {
              InitDecltor RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltor(dtor, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initdecltors ::= initdecltor COMMAR initdecltors 
            {
              InitDecltors RESULT =null;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitDecltor idtor = (InitDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idtorsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idtorsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecltors idtors = (InitDecltors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idtors.list.addFirst(idtor); RESULT = idtors; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltors",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initdecltors ::= initdecltor 
            {
              InitDecltors RESULT =null;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InitDecltor idtor = (InitDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InitDecltors(idtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecltors",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decltors ::= decltor COMMAR decltors 
            {
              Decltors RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtorsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltors dtors = (Decltors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 dtors.list.addFirst(dtor); RESULT = dtors; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltors",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decltors ::= decltor 
            {
              Decltors RESULT =null;
		int dtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decltor dtor = (Decltor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Decltors(dtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decltors",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // para ::= para COMMAR pldecl 
            {
              Para RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecl pd = (PlDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pr.list.addLast(pd); RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("para",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // para ::= pldecl 
            {
              Para RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PlDecl pd = (PlDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Para(pd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("para",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcdef ::= typespec pldecltor LPAREN para COMMAR ELLIPSIS RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, pr, true, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcdef ::= typespec pldecltor LPAREN para RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Para pr = (Para)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, pr, false, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcdef ::= typespec pldecltor LPAREN RPAREN cpdstmt 
            {
              Func RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pdtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pdtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PlDecltor pdtor = (PlDecltor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CpdStmt body = (CpdStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Func(ts, pdtor, null, false, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vardecl ::= typespec initdecltors SEMICOLON 
            {
              VarDecl RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idtorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idtorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitDecltors idtor = (InitDecltors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(ts, idtor); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vardecl ::= typespec SEMICOLON 
            {
              VarDecl RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ts = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(ts, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declar ::= vardecl 
            {
              Declar RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vard; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declar",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declars ::= declar declars 
            {
              Declars RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declar d = (Declar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declars ds = (Declars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              if (ds == null) RESULT = new Declars(d);
              else { ds.list.addFirst(d); RESULT = ds; }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declars",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declars ::= 
            {
              Declars RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declars",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= funcdef 
            {
              Decl RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Func fund = (Func)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fund; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= declar 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declar d = (Declar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls ::= decl decls 
            {
              Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (ds == null) RESULT = new Decls(d);
            else { ds.list.addFirst(d); RESULT = ds; }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= 
            {
              Decls RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pps ::= PREPROCESSOR pps 
            {
              Preprocessors RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Preprocessors ps = (Preprocessors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if (ps == null) RESULT = new Preprocessors(p);
            else {ps.list.addFirst(p); RESULT = ps; }
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pps",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pps ::= 
            {
              Preprocessors RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pps",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= pps decls 
            {
              Program RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Preprocessors ps = (Preprocessors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(ps, ds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

